// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  token             String?
  image         String?
  password      String
  sessions      Session[]

  profile_picture_url String?
  bio               String?
  role              String   @default("subscriber")

  posts             Post[]
  comments          Comment[]
  bookmarks         Bookmark[]
  likes             Like[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Post {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  published         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  authorId          String
  author            User     @relation(fields: [authorId], references: [id])

  comments          Comment[]
  bookmarks         Bookmark[]
  likes             Like[]

  bookmarkCount     Int      @default(0)
  likeCount         Int      @default(0)
  commentCount      Int      @default(0)
}



model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  createdAt   DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

